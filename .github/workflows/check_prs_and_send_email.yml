name: Check PRs and send email

on:
  schedule:
    - cron: '0 11 * * *'

  workflow_dispatch:

jobs:
  check-prs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: pip install requests

    - name: Fetch open PRs waiting for review
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        python3 <<EOF
        import os
        import requests
        import smtplib
        from email.mime.text import MIMEText

        # repository information
        repo = os.getenv('GITHUB_REPOSITORY')
        token = os.getenv('GITHUB_TOKEN')

        url = f'https://api.github.com/repos/{repo}/pulls'
        headers = {'Authorization': f'token {token}'}

        response = requests.get(url, headers=headers)
        pulls = response.json()

        # pull requests waiting for reviews
        waiting_for_review = []
        for pr in pulls:
            if pr['state'] == 'open' and not pr['draft']:
                reviews_url = pr['_links']['self']['href'] + '/reviews'
                reviews_response = requests.get(reviews_url, headers=headers)
                reviews = reviews_response.json()

                if not reviews:
                    waiting_for_review.append(pr)

        if not waiting_for_review:
            print("No PRs waiting for review.")
            exit(0)

        # email template
        pr_details = ""
        for pr in waiting_for_review:
            pr_details += f"- {pr['title']} by {pr['user']['login']} - {pr['html_url']}\n"

        email_body = f"The following pull requests are waiting for review:\n\n{pr_details}"

        # sen email by gmail
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        sender_email = os.getenv('SMTP_EMAIL')
        sender_password = os.getenv('SMTP_PASSWORD')
        recipient_email = os.getenv('RECIPIENT_EMAIL')

        msg = MIMEText(email_body)
        msg['Subject'] = "Pull Requests Waiting for Review"
        msg['From'] = sender_email
        msg['To'] = recipient_email

        try:
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, recipient_email, msg.as_string())
            server.quit()
            print("Email sent successfully.")
        except Exception as e:
            print(f"Failed to send email: {e}")
        EOF
